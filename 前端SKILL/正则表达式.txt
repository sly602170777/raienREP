13:49 2021/08/07
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replace

22:28 2021/09/11

10:16 2021/07/25

正则表达式可以让用户通过使用一系列的特殊字符构建匹配模式，然后把匹配模式与数据文件、程序输入以及WEB页面的表单输入等目标对象进行比较，根据比较对象中是否包含匹配模式，执行相应的程序。 


较为常用的元字符包括： “+”， “*”，以及 “?”。
其中，
“+”元字符规定其前导字符必须在目标对象中连续出现一次或多次，
“*”元字符规定其前导字符必须在目标对象中出现零次或连续多次，
“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次。 


在对如何使用正则表达式有了初步了解之后，我们来看一下其它几个重要的元字符的使用方式。 



　　\s：用于匹配单个空格符，包括tab键和换行符； 

　　\S：用于匹配除单个空格符之外的所有字符； 

　　\d：用于匹配从0到9的数字； 

　　\w：用于匹配字母，数字或下划线字符； 

　　\W：用于匹配所有与\w不匹配的字符； 

　　. ：用于匹配除换行符之外的所有字符。 

　　（说明：我们可以把\s和\S以及\w和\W看作互为逆运算） 



---------------------------------------
用于匹配目标对象中的一个或多个空格字符   -- 　/\s+/

通过上述正则表达式轻而易举的查找到所有总额达千元的款项   --  /\d000/

---------------------------------------


较为常用的定位符包括： “^”, “$”, “\b” 以及 “\B”。其中，
“^”定位符规定匹配模式必须出现在目标字符串的开头，
“$”定位符规定匹配模式必须出现在目标对象的结尾，
\b定位符规定匹配模式必须出现在目标字符串的开头或结尾的两个边界之一，
“\B”定位符则规定匹配对象必须位于目标字符串的开头和结尾两个边界之内，即匹配对象既不能作为目标字符串的开头，也不能作为目标字符串的结尾。


正则表达式中包含“^”定位符，所以可以与目标对象中以 “hell”, “hello”或 “hellhound”开头的字符串相匹配。   
--　/^hell/ 


正则表达式中包含“$”定位符，所以可以与目标对象中以 “car”, “bar”或 “ar” 结尾的字符串相匹配。 
--　/ar$/ 
 
正则表达式模式以“\b”定位符开头，所以可以与目标对象中以 “bomb”, 或 “bom”开头的字符串相匹配。
--　/\bbom/ 

正则表达式模式以“\b”定位符结尾，所以可以与目标对象中以 “human”, “woman”或 “man”结尾的字符串相匹配。 
--  /man\b/ 


正则表达式将会与从A到Z范围内任何一个大写字母相匹配。  -- /[A-Z]/ 


正则表达式将会与从a到z范围内任何一个小写字母相匹配。  -- /[a-z]/ 



正则表达式将会与从0到9范围内任何一个数字相匹配。	--   /[0-9]/ 


正则表达式将会与任何由字母和数字组成的字符串，如 “aB0” 等相匹配。这里需要提醒用户注意的一点就是可以在正则表达式中使用 “()” 把字符串组合在一起。“()”符号包含的内容必须同时出现在目标对象中。因此，上述正则表达式将无法与诸如 “abc”等的字符串匹配，因为“abc”中的最后一个字符为字母而非数字。   --    /([a-z][A-Z][0-9])+/ 





2 正则表达式中的常用模式
下面是正则表达式中的一些常用模式。

/pattern/  结果  
. 匹配除换行符以外的所有字符 
x? 匹配 0 次或一次 x 字符串 
x* 匹配 0 次或多次 x 字符串，但匹配可能的最少次数 
x+ 匹配 1 次或多次 x 字符串，但匹配可能的最少次数 
.* 匹配 0 次或一次的任何字符 
.+ 匹配 1 次或多次的任何字符 
{m} 匹配刚好是 m 个 的指定字符串 
{m,n} 匹配在 m个 以上 n个 以下 的指定字符串 
{m,} 匹配 m个 以上 的指定字符串 
[] 匹配符合 [] 内的字符 
[^] 匹配不符合 [] 内的字符 
[0-9] 匹配所有数字字符 
[a-z] 匹配所有小写字母字符 
[^0-9] 匹配所有非数字字符 
[^a-z] 匹配所有非小写字母字符 
^ 匹配字符开头的字符 
$ 匹配字符结尾的字符 
\d 匹配一个数字的字符，和 [0-9] 语法一样 
\d+ 匹配多个数字字符串，和 [0-9]+ 语法一样 
\D 非数字，其他同 \d 
\D+ 非数字，其他同 \d+ 
\w 英文字母或数字的字符串，和 [a-zA-Z0-9] 语法一样 
\w+ 和 [a-zA-Z0-9]+ 语法一样 
\W 非英文字母或数字的字符串，和 [^a-zA-Z0-9] 语法一样 
\W+ 和 [^a-zA-Z0-9]+ 语法一样 
\s 空格，和 [\n\t\r\f] 语法一样 
\s+ 和 [\n\t\r\f]+ 一样 
\S 非空格，和 [^\n\t\r\f] 语法一样 
\S+ 和 [^\n\t\r\f]+ 语法一样 
\b 匹配以英文字母,数字为边界的字符串 
\B 匹配不以英文字母,数值为边界的字符串 
a|b|c 匹配符合a字符 或是b字符 或是c字符 的字符串 
abc 匹配含有 abc 的字符串 
(pattern) () 这个符号会记住所找寻到的字符串，是一个很实用的语法。第一个 () 内所找到的字符串变成 $1 这个变量或是 \1 变量，第二个 () 内所找到的字符串变成 $2 这个变量或是 \2 变量，以此类推下去。



字符  含义 
\cx  匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 
\f  匹配一个换页符。等价于 \x0c 和 \cL。 
\n  匹配一个换行符。等价于 \x0a 和 \cJ。 
\r  匹配一个回车符。等价于 \x0d 和 \cM。 
\s  匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 
\S  匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 
\t  匹配一个制表符。等价于 \x09 和 \cI。 
\v  匹配一个垂直制表符。等价于 \x0b 和 \cK。 





特别字符 说明 
$ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。 
( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。 
* 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。 
+ 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。 
. 匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。 
[  标记一个中括号表达式的开始。要匹配 [，请使用 \[。 
? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。 
\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。 
^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。 
{ 标记限定符表达式的开始。要匹配 {，请使用 \{。 
| 指明两项之间的一个选择。要匹配 |，请使用 \|。 




各种操作符的运算优先级

相同优先级的从左到右进行运算，不同优先级的运算先高后低。各种操作符的优先级从高到低如下：
操作符               描述 
\                    转义符 
(), (?:), (?=), []   圆括号和方括号 
*, +, ?, {n}, {n,}, {n,m}  限定符 
^, $, \anymetacharacter    位置和顺序 
|                         “或”操作 









